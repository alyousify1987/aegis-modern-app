name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # nightly at 02:00 UTC

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      actions: read
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install root dependencies
        run: npm ci

      - name: Install server dependencies
        run: npm ci
        working-directory: server

      - name: Typecheck, build, smoke, and E2E
        run: npm run -s ci:all

      - name: Bundle coverage into Playwright report (for Pages)
        if: always()
        run: |
          if [ -d coverage ]; then
            mkdir -p playwright-report/coverage
            cp -r coverage/* playwright-report/coverage/
          fi

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Ensure Playwright browsers installed
        run: npx playwright install --with-deps
        if: always()

      - name: Re-run E2E if flaky (optional best-effort)
        run: npx playwright test --reporter=html || npx playwright test --reporter=html
        if: failure()
        env:
          E2E_BASE_URL: http://localhost:1420

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7

      - name: Upload coverage HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          retention-days: 7

      - name: Upload Playwright traces and test-results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            test-results
            **/*.zip
          retention-days: 7

      # Ensure a report directory exists even if tests failed, so Pages can deploy something
      - name: Ensure report exists (placeholder if missing)
        if: always()
        run: |
          if [ ! -f playwright-report/index.html ]; then
            mkdir -p playwright-report
            cat > playwright-report/index.html <<'HTML'
            <!doctype html>
            <html lang="en"><meta charset="utf-8"/><title>No Report</title>
            <body style="font-family:sans-serif;padding:2rem">
            <h1>No Playwright report generated</h1>
            <p>Tests may have failed before the reporter produced output. Please check the CI logs and uploaded artifacts.</p>
            </body></html>
            HTML
          fi

      - name: Upload Pages artifact (Playwright HTML report)
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: playwright-report

      - name: Open GitHub Issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = process.env.GITHUB_SHA;
            const runId = process.env.GITHUB_RUN_ID;
            const repo = process.env.GITHUB_REPOSITORY;
            const [owner, repoName] = repo.split('/');
            const runUrl = `https://github.com/${repo}/actions/runs/${runId}`;
            const pagesUrl = `https://${owner}.github.io/${repoName}/`;
            const title = `CI failed on ${sha.substring(0,7)}: ${process.env.GITHUB_REF_NAME}`;
            const body = `Automated issue opened due to CI failure.\n\n- Run: ${runUrl}\n- Pages report (if available): ${pagesUrl}\n- Branch: ${process.env.GITHUB_REF_NAME}\n- Commit: ${sha}\n\nArtifacts (report, traces) are attached to the run. Please check failing step logs and the published report.`;
            await github.rest.issues.create({ owner, repo: repoName, title, body, labels: ['ci','failure'] });

      - name: Notify Slack (failure)
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        run: |
          STATUS="FAILED"
          PAYLOAD=$(jq -nc --arg text "CI $STATUS: $GITHUB_REPOSITORY@$GITHUB_REF_NAME (run $GITHUB_RUN_ID). Report: https://${GITHUB_REPOSITORY%%/*}.github.io/${GITHUB_REPOSITORY##*/}/" '{text: $text}')
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"

      - name: Notify Slack (success)
        if: success() && env.SLACK_WEBHOOK_URL != ''
        run: |
          STATUS="PASSED"
          PAYLOAD=$(jq -nc --arg text "CI $STATUS: $GITHUB_REPOSITORY@$GITHUB_REF_NAME (run $GITHUB_RUN_ID). Report: https://${GITHUB_REPOSITORY%%/*}.github.io/${GITHUB_REPOSITORY##*/}/" '{text: $text}')
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"

      - name: Notify Teams (failure)
        if: failure() && env.TEAMS_WEBHOOK_URL != ''
        run: |
          cat > payload.json <<'JSON'
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "CI Failed",
            "themeColor": "EA4300",
            "title": "CI Failed",
            "text": "CI failed for ${GITHUB_REPOSITORY} on ${GITHUB_REF_NAME}. Report: https://${GITHUB_REPOSITORY%%/*}.github.io/${GITHUB_REPOSITORY##*/}/"
          }
          JSON
          curl -H 'Content-Type: application/json' -d @payload.json "$TEAMS_WEBHOOK_URL"

      - name: Notify Teams (success)
        if: success() && env.TEAMS_WEBHOOK_URL != ''
        run: |
          cat > payload.json <<'JSON'
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "CI Passed",
            "themeColor": "2EB886",
            "title": "CI Passed",
            "text": "CI passed for ${GITHUB_REPOSITORY} on ${GITHUB_REF_NAME}. Report: https://${GITHUB_REPOSITORY%%/*}.github.io/${GITHUB_REPOSITORY##*/}/"
          }
          JSON
          curl -H 'Content-Type: application/json' -d @payload.json "$TEAMS_WEBHOOK_URL"

  deploy-pages:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: pages
      cancel-in-progress: true
    steps:
      - name: Close prior CI failure issues on success
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repo = process.env.GITHUB_REPOSITORY;
            const [owner, repoName] = repo.split('/');
            const issues = await github.paginate(github.rest.issues.listForRepo, { owner, repo: repoName, labels: 'ci,failure', state: 'open' });
            for (const issue of issues) {
              await github.rest.issues.createComment({ owner, repo: repoName, issue_number: issue.number, body: 'CI is green again. Closing this failure issue automatically.' });
              await github.rest.issues.update({ owner, repo: repoName, issue_number: issue.number, state: 'closed' });
            }
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  role          UserRole @default(USER)
  department    String?
  position      String?
  phone         String?
  avatar        String?
  isActive      Boolean  @default(true)
  lastLogin     DateTime?
  emailVerified Boolean  @default(false)
  twoFactorEnabled Boolean @default(false)
  preferences   Json?
  organizationId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organization      Organization? @relation(fields: [organizationId], references: [id])
  createdAudits     Audit[]        @relation("AuditCreator")
  assignedAudits    AuditUser[]
  riskAssessments   Risk[]
  actions           Action[]
  comments          Comment[]
  notifications     Notification[]
  documents         Document[]
  auditLogs         AuditLog[]
  sessions          UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  device    String?
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  AUDITOR
  MANAGER
  USER
  VIEWER
}

// Organization Structure
model Organization {
  id          String @id @default(cuid())
  name        String
  description String?
  logo        String?
  address     String?
  phone       String?
  email       String?
  website     String?
  industry    String?
  size        String?
  country     String?
  timezone    String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  departments Department[]
  audits      Audit[]
  policies    Policy[]

  @@map("organizations")
}

model Department {
  id             String @id @default(cuid())
  organizationId String
  name           String
  description    String?
  head           String?
  parentId       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id])
  parent       Department?   @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children     Department[]  @relation("DepartmentHierarchy")
  audits       Audit[]
  risks        Risk[]

  @@map("departments")
}

// Audit Management
model Audit {
  id             String      @id @default(cuid())
  title          String
  description    String?
  type           AuditType
  status         AuditStatus @default(PLANNED)
  priority       Priority    @default(MEDIUM)
  standard       String      // ISO22000, HACCP, SFDA, etc.
  scope          String
  objectives     String[]
  criteria       String[]
  methodology    String?
  startDate      DateTime
  endDate        DateTime
  estimatedHours Int?
  actualHours    Int?
  budget         Float?
  
  // References
  organizationId String
  departmentId   String?
  createdById    String
  leadAuditorId  String?
  
  // Configuration
  template       Json?
  checklist      Json?
  settings       Json?
  
  // Results
  score          Float?
  findings       Json?
  recommendations String[]
  followUpDate   DateTime?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization   @relation(fields: [organizationId], references: [id])
  department     Department?    @relation(fields: [departmentId], references: [id])
  createdBy      User          @relation("AuditCreator", fields: [createdById], references: [id])
  auditors       AuditUser[]
  findings       Finding[]
  actions        Action[]
  documents      Document[]
  comments       Comment[]
  evidence       Evidence[]

  @@map("audits")
}

model AuditUser {
  id       String    @id @default(cuid())
  auditId  String
  userId   String
  role     AuditorRole
  assignedAt DateTime @default(now())

  audit Audit @relation(fields: [auditId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([auditId, userId])
  @@map("audit_users")
}

enum AuditType {
  INTERNAL
  EXTERNAL
  SURVEILLANCE
  CERTIFICATION
  COMPLIANCE
  MANAGEMENT_REVIEW
  SUPPLIER
  CUSTOMER
}

enum AuditStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
  DRAFT
}

enum AuditorRole {
  LEAD_AUDITOR
  AUDITOR
  OBSERVER
  TECHNICAL_EXPERT
}

// Findings Management
model Finding {
  id          String       @id @default(cuid())
  auditId     String
  title       String
  description String
  type        FindingType
  severity    Severity
  category    String?
  clause      String?      // Standard clause reference
  location    String?
  evidence    String?
  rootCause   String?
  impact      String?
  likelihood  String?
  status      FindingStatus @default(OPEN)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  audit     Audit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
  actions   Action[]
  documents Document[]
  evidence  Evidence[]

  @@map("findings")
}

enum FindingType {
  NON_CONFORMITY
  OBSERVATION
  IMPROVEMENT_OPPORTUNITY
  POSITIVE_FINDING
  RECOMMENDATION
}

enum FindingStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  VERIFIED
  CLOSED
}

// Risk Management
model Risk {
  id             String     @id @default(cuid())
  title          String
  description    String
  category       String
  type           RiskType
  probability    Int        // 1-5 scale
  impact         Int        // 1-5 scale
  riskScore      Float      // Calculated: probability * impact
  tolerance      String?
  owner          String
  status         RiskStatus @default(IDENTIFIED)
  departmentId   String?
  identifiedDate DateTime   @default(now())
  reviewDate     DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  department      Department?       @relation(fields: [departmentId], references: [id])
  assessments     RiskAssessment[]
  controls        RiskControl[]
  actions         Action[]

  @@map("risks")
}

model RiskAssessment {
  id               String   @id @default(cuid())
  riskId           String
  assessorId       String
  probability      Int
  impact           Int
  riskScore        Float
  residualRisk     Float?
  assessment       String
  recommendations  String[]
  assessmentDate   DateTime @default(now())

  risk     Risk @relation(fields: [riskId], references: [id], onDelete: Cascade)
  assessor User @relation(fields: [assessorId], references: [id])

  @@map("risk_assessments")
}

model RiskControl {
  id           String      @id @default(cuid())
  riskId       String
  title        String
  description  String
  type         ControlType
  effectiveness String?
  owner        String
  implementedDate DateTime?
  reviewDate   DateTime?
  status       String     @default("active")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  risk Risk @relation(fields: [riskId], references: [id], onDelete: Cascade)

  @@map("risk_controls")
}

enum RiskType {
  OPERATIONAL
  STRATEGIC
  FINANCIAL
  COMPLIANCE
  REPUTATIONAL
  TECHNOLOGICAL
  ENVIRONMENTAL
  SAFETY
}

enum RiskStatus {
  IDENTIFIED
  ASSESSED
  MITIGATED
  MONITORED
  CLOSED
}

enum ControlType {
  PREVENTIVE
  DETECTIVE
  CORRECTIVE
  COMPENSATING
}

// Action Management
model Action {
  id          String       @id @default(cuid())
  title       String
  description String
  type        ActionType
  priority    Priority     @default(MEDIUM)
  status      ActionStatus @default(OPEN)
  assigneeId  String
  createdById String
  auditId     String?
  findingId   String?
  riskId      String?
  dueDate     DateTime
  completedDate DateTime?
  estimatedEffort String?
  actualEffort   String?
  cost        Float?
  verification String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  assignee  User     @relation(fields: [assigneeId], references: [id])
  createdBy User     @relation(fields: [createdById], references: [id])
  audit     Audit?   @relation(fields: [auditId], references: [id])
  finding   Finding? @relation(fields: [findingId], references: [id])
  risk      Risk?    @relation(fields: [riskId], references: [id])
  updates   ActionUpdate[]
  documents Document[]

  @@map("actions")
}

model ActionUpdate {
  id        String   @id @default(cuid())
  actionId  String
  update    String
  progress  Int      // 0-100 percentage
  updatedBy String
  createdAt DateTime @default(now())

  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@map("action_updates")
}

enum ActionType {
  CORRECTIVE
  PREVENTIVE
  IMPROVEMENT
  MAINTENANCE
  INVESTIGATION
}

enum ActionStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  VERIFIED
  CLOSED
  OVERDUE
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum Severity {
  CRITICAL
  MAJOR
  MINOR
}

// Compliance Management
model Policy {
  id             String   @id @default(cuid())
  organizationId String
  title          String
  description    String
  version        String
  category       String
  owner          String
  reviewDate     DateTime
  approvalDate   DateTime?
  effectiveDate  DateTime
  expiryDate     DateTime?
  status         String   @default("draft")
  content        String
  tags           String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  controls     Control[]

  @@map("policies")
}

model Control {
  id          String      @id @default(cuid())
  policyId    String?
  title       String
  description String
  category    String
  type        ControlType
  frequency   String      // daily, weekly, monthly, etc.
  owner       String
  status      String      @default("active")
  lastTested  DateTime?
  nextTest    DateTime?
  effectiveness String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  policy Policy? @relation(fields: [policyId], references: [id])
  tests  ControlTest[]

  @@map("controls")
}

model ControlTest {
  id          String   @id @default(cuid())
  controlId   String
  testDate    DateTime
  result      String
  tester      String
  notes       String?
  passed      Boolean
  evidence    String?
  nextTest    DateTime?
  createdAt   DateTime @default(now())

  control Control @relation(fields: [controlId], references: [id], onDelete: Cascade)

  @@map("control_tests")
}

// Knowledge Management
model Document {
  id          String      @id @default(cuid())
  title       String
  description String?
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  category    String?
  tags        String[]
  version     String      @default("1.0")
  status      String      @default("active")
  uploadedById String
  auditId     String?
  findingId   String?
  actionId    String?
  isPublic    Boolean     @default(false)
  downloadCount Int       @default(0)
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  uploadedBy User     @relation(fields: [uploadedById], references: [id])
  audit      Audit?   @relation(fields: [auditId], references: [id])
  finding    Finding? @relation(fields: [findingId], references: [id])
  action     Action?  @relation(fields: [actionId], references: [id])

  @@map("documents")
}

model Evidence {
  id          String   @id @default(cuid())
  auditId     String?
  findingId   String?
  title       String
  description String?
  type        String   // photo, document, video, etc.
  filename    String?
  path        String?
  metadata    Json?
  collectedBy String
  collectedAt DateTime @default(now())
  verified    Boolean  @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?

  audit   Audit?   @relation(fields: [auditId], references: [id])
  finding Finding? @relation(fields: [findingId], references: [id])

  @@map("evidence")
}

// Communication
model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  auditId   String?
  parentId  String?
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  audit    Audit?    @relation(fields: [auditId], references: [id])
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  data      Json?
  read      Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// System Logs
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  changes   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Templates
model AuditTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        AuditType
  standard    String
  checklist   Json
  settings    Json?
  isDefault   Boolean  @default(false)
  isPublic    Boolean  @default(false)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("audit_templates")
}

// Analytics
model Metric {
  id        String   @id @default(cuid())
  name      String
  category  String
  value     Float
  unit      String?
  dimension Json?
  timestamp DateTime @default(now())

  @@map("metrics")
}
